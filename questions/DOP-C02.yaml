course_detail:
  title: AWS Certified DevOps Engineer – Professional – DOP-C02
  question_number: 4

questions:
- id: 1
  title: CodeDeploy の Blue/Green デプロイ目的
  text: Blue/Green デプロイ戦略が従来の In-Place デプロイと比較して最も優れている点は？
  choices:
    - 新バージョンを並列環境でテストし、問題があれば即座にロールバックできる
    - インスタンスを自動的にスケールアップできる
    - アプリケーションログを自動で暗号化する
    - DNS 設定を不要にする
  answer: 新バージョンを並列環境でテストし、問題があれば即座にロールバックできる
  explanation: CodeDeploy Blue/Green では旧環境 (blue) を残したまま新環境 (green) を検証し、トラフィックを段階的に切替え失敗時は速やかに元へ戻せます。 

- id: 2
  title: CodeDeploy 自動ロールバック
  text: デプロイ失敗時に前回の正常バージョンへ⾃動で戻すには、デプロイグループでどの設定を有効にしますか？
  choices:
    - Automatic rollback
    - LifeCycleEventHooks
    - MinimumHealthyHosts を 0 に設定
    - DisableTraffic だけを有効化
  answer: Automatic rollback
  explanation: デプロイグループ作成・更新時に自動ロールバックを有効にすると、失敗や CloudWatch アラーム発火時に復旧します。 

- id: 3
  title: Manual Approval アクション
  text: 本番リリース前に人の承認を要求するステージを CodePipeline に追加するには？
  choices:
    - Manual approval アクションをステージ内に追加する
    - CloudFormation 変更セットのみ作成する
    - SNS トピックをサブスクライブする
    - CodeDeploy に Deployment hook を追加する
  answer: Manual approval アクションをステージ内に追加する
  explanation: CodePipeline の Approvals アクションを使い、承認者がコンソールまたは CLI で承認するまでパイプラインは停止します。 

- id: 4
  title: CodePipeline 変数の利用
  text: 上流アクションが生成したコミット ID などを下流アクションで参照するには何を設定しますか？
  choices:
    - アクションに namespace を割り当てて変数を参照する
    - SSM パラメータを使用
    - 変数は使えない
    - CloudTrail ログを解析する
  answer: アクションに namespace を割り当てて変数を参照する
  explanation: "アクションに namespace を指定すると、`${Namespace.VariableName}` 形式で下流アクションが値を利用できます。 "

- id: 5
  title: CloudFormation パラメータオーバーライド
  text: パイプライン実行時にテンプレートのパラメータ値を動的に差し替える CodePipeline 機能は？
  choices:
    - Parameter overrides (Fn::GetArtifactAtt / Fn::GetParam)
    - Stack policy
    - Change set execution
    - Drift detection
  answer: Parameter overrides (Fn::GetArtifactAtt / Fn::GetParam)
  explanation: CloudFormation アクションで `ParameterOverrides` に組み込み関数を用いると、実行時にアーティファクトの値を渡せます。 

- id: 6
  title: CodeBuild Report Group
  text: テスト実行結果を可視化し履歴を保持するため CodeBuild で利用するリソースは？
  choices:
    - Report group
    - Artifact store
    - Phase context variable
    - Build badge
  answer: Report group
  explanation: Report group にテストレポートが集約され、複数ビルドの履歴やパス/失敗率を確認できます。 

- id: 7
  title: Report Group 自動作成
  text: buildspec に report group 名を記入し、該当 report group が存在しない場合の挙動は？
  choices:
    - CodeBuild が自動で report group を作成する
    - ビルドは失敗する
    - レポートは無視される
    - buildspec が無効になる
  answer: CodeBuild が自動で report group を作成する
  explanation: buildspec に指定すると実行時に report group が自動生成され、以降のビルドで再利用されます。 

- id: 8
  title: Drift Detection の目的
  text: CloudFormation における「ドリフト」とは？
  choices:
    - 実際のリソース構成がテンプレートから逸脱している状態
    - 変更セットのプレビュー
    - スタック削除保護が有効
    - スタックセットが未展開
  answer: 実際のリソース構成がテンプレートから逸脱している状態
  explanation: Drift Detection はスタック・リソースが期待値と異なるかを検出し、差分を詳細に報告します。 

- id: 9
  title: Change Set の利点
  text: CloudFormation Change Set を使用する主な利点は？
  choices:
    - スタック更新前に影響をプレビューできる
    - 自動的に IAM ロールを作成する
    - リージョン間で自動レプリケーションする
    - バージョニングを無効化する
  answer: スタック更新前に影響をプレビューできる
  explanation: Change Set はリソースの追加・削除・置換などを実行前に確認でき、安全なリリースを支援します。 

- id: 10
  title: Nested Stack Change Set
  text: ネストされたスタックを使う場合、Change Set でプレビューできる範囲は？
  choices:
    - 階層全体のリソース変更
    - ルートスタックのみ
    - S3 テンプレートが対象外
    - ネストレベル 1 まで
  answer: 階層全体のリソース変更
  explanation: CloudFormation は nested stack 階層全体の変更セットを生成し、影響を総覧できます。 

- id: 11
  title: Composite Alarm の用途
  text: CloudWatch Composite Alarm が推奨される代表的なシナリオは？
  choices:
    - 関連アラームをまとめて 1 つのアラートにしノイズを低減する
    - 10 秒粒度のメトリクス取得
    - SNS トピックの自動作成
    - ダッシュボードの自動生成
  answer: 関連アラームをまとめて 1 つのアラートにしノイズを低減する
  explanation: Composite Alarm は単独アラームをブール条件で評価し、まとめた指標で通知頻度を最適化します。 

- id: 12
  title: Systems Manager Runbook
  text: SSM Automation で再利用可能なプロセスを記述したドキュメントは一般に何と呼ばれますか？
  choices:
    - Runbook
    - Playbook
    - StepFunction
    - Patch Group
  answer: Runbook
  explanation: Automation runbook は JSON/YAML でワークフローを定義し、AWS 提供の多数のプリセットがあります。 

- id: 13
  title: Blue/Green ロールバック条件
  text: ECS Blue/Green デプロイで CloudWatch アラームを設定し、アラームが発火した場合のデフォルト挙動は？
  choices:
    - デプロイは自動ロールバックされる
    - デプロイは継続する
    - 手動承認が必要になる
    - タスクは強制停止されない
  answer: デプロイは自動ロールバックされる
  explanation: Blue/Green デプロイはモニタリング中にアラームが発火すると直前のリビジョンへロールバックします。 

- id: 14
  title: Automation Patch Runbook
  text: "AWS 提供の `AWS-RunPatchBaseline` runbook を使用した場合に自動で実施される操作は？"
  choices:
    - OS パッチ適用と再起動
    - AMI の自動ビルド
    - CloudFormation スタック削除
    - CodeDeploy タグ付け
  answer: OS パッチ適用と再起動
  explanation: "`AWS-RunPatchBaseline` はターゲットに適用可能なパッチを評価・インストールし、必要に応じてリブートします。 "

- id: 15
  title: CodePipeline ステージロールバック
  text: CloudFormation ステージで失敗時に自動で前回成功リビジョンに戻したい場合のテンプレート設定は？
  choices:
    - OnFailure: ROLLBACK
    - AutoExecute: true
    - DriftCheck: ENABLED
    - TerminationProtection: True
  answer: OnFailure： ROLLBACK
  explanation: "`OnFailure: ROLLBACK` を指定するとステージが失敗時に直前の成功ステートへ戻ります。 "

- id: 16
  title: CodeDeploy 交通切替待機時間
  text: Blue/Green デプロイで「TerminateBlueInstancesOnDeploymentSuccess.waitTime」 を 0 に設定すると何が起こりますか？
  choices:
    - トラフィック切替完了直後に旧タスクセットが終了する
    - 長さ 1 時間の待機期間が入る
    - ロールバックが無効になる
    - デプロイは失敗扱いになる
  answer: トラフィック切替完了直後に旧タスクセットが終了する
  explanation: waitTime 0 は即時に Blue を停止しリソースコストを最小化します。 

- id: 17
  title: CloudFormation ChangeSet の安全性
  text: スタック更新で不可逆的な削除が含まれている場合、Change Set にはどのように表示されますか？
  choices:
    - Replacement: True
    - No change
    - Drifted: True
    - Retain: Enabled
  answer: Replacement： True
  explanation: リソース再作成が必要な場合は Replacement フラグが付き、データ損失が起こる可能性を示します。 

- id: 18
  title: CodePipeline Source Revision Override
  text: 特定コミット ID を指定してパイプラインをトリガーしたい場合に使用する CLI は？
  choices:
    - "`start-pipeline-execution` で `--source-revision` を指定"
    - "`get-pipeline-state`"
    - "`put-job-success-result`"
    - "`retry-stage-execution`"
  answer: "`start-pipeline-execution` で `--source-revision` を指定"
  explanation: "`aws codepipeline start-pipeline-execution --name <Pipeline> --source-revision <CommitID>` で任意コミットを流せます。 "

- id: 19
  title: Composite Alarm の Boolean 例
  text: 「CPUUtilization > 80 %」と「ELB 5xx エラー > 5」の両方が ALARM の時のみ通知を送りたい場合、Composite Alarm で使用する演算子は？
  choices:
    - AND
    - OR
    - NOR
    - XOR
  answer: AND
  explanation: compositeRule に `ALARM("CPU") AND ALARM("ELB5xx")` を記述すると両方発火時にアラーム状態になります。 

- id: 20
  title: CodePipeline 自動ロールバック条件
  text: Blue/Green デプロイメントアクションでロールバックをトリガーする CloudWatch アラームはパイプラインのどのステージに関連付けますか？
  choices:
    - デプロイステージのデプロイグループ
    - ソースステージ
    - ビルドステージ
    - 手動承認ステージ
  answer: デプロイステージのデプロイグループ
  explanation: デプロイアクションで設定したデプロイグループが監視する CloudWatch アラーム発火時に自動ロールバックします。 
